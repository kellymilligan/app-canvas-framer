import { _, $, BaseObject } from '../common';

import distance from '../utils/math/distance';
import pointInsidePolygon from '../utils/math/point/point_inside_polygon';

import drawCircle from '../utils/canvas/draw_circle';

export default Object.assign( Object.create( BaseObject ), {


    DEBUG: true,

    ctx : null,

    width: 0,
    height: 0,


    setup: function (options) {

        this.ctx = options.config.canvas.getContext( '2d' );
    },

    draw: function () {

        // this.ctx.fillStyle = "rgb(0, 0, 0)";
        // this.ctx.fillRect( 0, 0, this.ctx.canvas.width, this.ctx.canvas.height );

        this.ctx.globalCompositeOperation = 'multiply';
        this.ctx.globalAlpha = 0.3;

        const DROP = _.map(
            ["0.8002606681223666,0.40213708770409057","0.7923075815265098,0.391485595703125","0.7843544263518258,0.38083403512333214","0.7764014083347963,0.3701825431223666","0.7684482531601123,0.35953101683198735","0.7604951665642556,0.34887949054160816","0.7525420799683988,0.3382279642512289","0.7445889933725421,0.3275764036714361","0.7366359067766854,0.3169248773810569","0.7286828201808286,0.30627335109067766","0.7207297335849719,0.29562182480029847","0.7127766469891151,0.28497031565462605","0.7048235603932584,0.27431878936424686","0.6968704052185745,0.2636672630738676","0.6889173186227177,0.25301573678348843","0.680964232026861,0.242364227637816","0.6730111454310043,0.2317127013474368","0.6650580588351475,0.22106114076764397","0.6571049722392908,0.21040963162197157","0.649151885643434,0.19975810533159236","0.64119873046875,0.18910656189650632","0.6332456438728933,0.17845505275083393","0.6252925572770365,0.1678035264604547","0.6173394706811798,0.1571520001700755","0.6093863840853231,0.14650047387969628","0.6014332974894663,0.13584893901696365","0.5934802108936096,0.12519740415423103","0.5855271242977528,0.11454587786385183","0.5775740377018961,0.1038943430011192","0.5696209168166257,0.0932428424278002","0.5616678302207689,0.08259130756506759","0.5537147093354986,0.07193978127468838","0.5457616227396419,0.06128824641195576","0.5378085361437851,0.050636715835399845","0.5298554495479284,0.039985185258843925","0.5219023629520716,0.029333680399348225","0.5139492420668013,0.01868214767970396","0.5059961554709446,0.008030617103148043","0.49804306887508776,0.002620877040905899","0.4900899479898174,0.013272437620698735","0.48213686139396067,0.02392396391107795","0.4741837747981039,0.034575455912043536","0.46623068820224717,0.04522698220242275","0.4582776016063905,0.055878508492801966","0.4503245150105337,0.06653003478318117","0.44237142841467697,0.07718156107356039","0.4344183075294066,0.0878330873639396","0.4264652209335499,0.09848461365431882","0.4185121000482795,0.10913613994469804","0.41055901345242274,0.11978768337978406","0.402605926856566,0.13043920967016326","0.3946528402607093,0.14109073596054247","0.3866997193754389,0.1517422793956285","0.37874663277958215,0.16239380568600773","0.3707935118943118,0.17304533197638694","0.36284042529845506,0.18369687541147298","0.3548873387025983,0.19434840170185216","0.34693425210674156,0.20499987655811094","0.3389811655108848,0.21565140284849016","0.3310280789150281,0.2263029462835762","0.32307499231917136,0.2369544725739554","0.3151219057233146,0.24760599886433463","0.3071687848380442,0.25825752515471384","0.2992156982421875,0.26890906858979985","0.29126257735691713,0.2795605948801791","0.2833094907610604,0.2902121211705583","0.2753564041652036,0.3008636474609375","0.2674033004246401,0.31151520804073035","0.25945019668407654,0.32216673433110954","0.25149714437763343,0.3328181920426615","0.2435440406370699,0.34346971833304074","0.23559093689650631,0.35412124462341993","0.2276378503006496,0.36477280520321276","0.21968474656008602,0.375424331493592","0.21173164281952248,0.3860758577839712","0.20377855622366572,0.39672738407435043","0.1958795440330934,0.40741875466336025","0.188322517309296,0.41835402585147474","0.1811575728855776,0.42955010231961027","0.1743943117977528,0.4409932340129038","0.16804206076632724,0.452669602297665","0.1621092549870523,0.46456449701544944","0.15660426107685219,0.47666337945488063","0.15153463985143084,0.4889509908268961","0.14690688915466996,0.501411832316538","0.14272804688871576,0.5140302679511938","0.13900301643971646,0.5267900102593925","0.13573640116145103,0.5396747717696629","0.13293201575118505,0.5526678535375702","0.1305926805131891,0.5657528652234024","0.12872019564167836,0.5789125592521067","0.12731521263551177,0.5921306481522121","0.12637732859407919,0.605389952927493","0.12590499192141416,0.6186738775017556","0.12589653958095592,0.6319663744294242","0.12635096860735603,0.6452511219496138","0.12727099643664413,0.6585114554073034","0.1286580289347788,0.6717313959357444","0.13051223754882812,0.6848937302492978","0.1328339908899886,0.6979819308505969","0.13562034006868856,0.7109789216116573","0.1388690819901027,0.7238681750351124","0.14257656483168013,0.7366330950447683","0.14673808237140099,0.7492571541432584","0.15134808829661164,0.7617247163579705","0.15640104486701195,0.7740191170338834","0.1618891855304161,0.7861256803019663","0.16780518949701545,0.798028838768434","0.17414183884524229,0.8097138479854283","0.18088942967104107,0.821166169241573","0.18803909816099018,0.8323720181925913","0.19558126042398175,0.8433174733365519","0.20350633256890802,0.8539891618021419","0.21180358200930477,0.864373779296875","0.22046243046106917,0.8744589130530197","0.22947190531184164,0.8842324246181531","0.23882043388452423,0.893681764066889","0.24849663209379388,0.9027955473139045","0.25848860151312325,0.9115617730644312","0.2687841865453827,0.9199694001272823","0.2793705458051703,0.9280080045207163","0.29023478647296347,0.935666750790028","0.3013634156645014,0.9429356950052669","0.31274331767907304,0.9498049618153089","0.3243604681465063,0.9562648130266854","0.3362002597765976,0.9623068820224719","0.34824794812148874,0.9679229393433989","0.360488754443908,0.9731046869513694","0.3729072142183111,0.9778451298060042","0.3854871085520541,0.9821382329705056","0.3982131100772472,0.9859776186139396","0.4110680055082514,0.9893590348490169","0.4240360902936271,0.9922777497366573","0.43709984254301265,0.9947317059120435","0.45024304336376403,0.9967178173279494","0.46344847947024226,0.9982356725114115","0.47669948620742625,0.999285340041257","0.48997912460498594,0.9998678485998946","0.5032707300079002,0.9999855298674508","0.5165587350223841,0.9996395496839887","0.5298263035463483,0.9988274392117276","0.5430569080824262,0.9975475525588132","0.5562337125285288,0.9957987238851825","0.5693400522296348,0.9935821876097262","0.5823587824789326,0.9908994524666432","0.5952734786472963,0.9877523015054425","0.6080669960279144,0.9841452609287219","0.6207230128599017,0.9800816225201896","0.6332254816976826,0.9755677641107795","0.6455584922533357,0.9706094463219803","0.6577059970812851,0.9652128412482444","0.6696533203125,0.9593863155064958","0.6813854431838132,0.9531375499253862","0.6928874840897121,0.9464750482794944","0.7041455215282655,0.9394077943951896","0.7151457711551966,0.9319457322024227","0.7258748600991924,0.9240988056311447","0.7363197583830758,0.9158774386630969","0.7464675046084972,0.9072917809647121","0.7563054116924157,0.8983530108848314","0.765821958391854,0.8890726496664326","0.7750050062543891,0.8794623557101475","0.7838433769311798,0.8695339931530899","0.7923257549157303,0.8592999061841643","0.8004410990168539,0.8487723018346208","0.8081788480951545,0.8379642100816362","0.8155290582206812,0.8268889352176966","0.8224821969364466,0.8155599872717697","0.8290286632066363,0.8039915620610955","0.8351591988895716,0.7921971696146418","0.8408656431048104,0.7801920344320575","0.8461407950754916,0.7679910381188554","0.8509763567635182,0.7556095423323385","0.85536636181092,0.7430629087298104","0.8593053239115168,0.7303676648086377","0.862787139549684,0.7175395151202598","0.8658089969935042,0.7045952614773525","0.8683667815133427,0.6915510199043188","0.870458435744382,0.6784242780021067","0.8720832053195224,0.6652314946892556","0.8732404730293188,0.65198974609375","0.8739308560832163,0.6387150110823385","0.8741568918978231,0.6254246400983146","0.873920226364993,0.612134337693118","0.8732187335410815,0.5988606313641152","0.8720509046918891,0.5856194313992276","0.8704158482926615,0.572428053952335","0.8683134271857443,0.5593030265208041","0.8657450129476826,0.5462612537855512","0.8627128686797753,0.5333195032698385","0.859220217586903,0.5204940281557233","0.8552715172928371,0.5078018359923631","0.8508712254213483,0.4952589056465063","0.8460247596997893,0.4828817646155197","0.8407396637991573,0.47068502018960673","0.8350232070751404,0.45868451407786165","0.8288835504081812,0.4468950935963834","0.8223278259963132,0.43533188037658005","0.8153652234023876,0.4240087273415555","0.8080061666081461,0.41293938454617274"],
            function (coord) { return coord.split( ',' ); }
        );

        var w = this.width;

        var dropAdj = _.map( DROP, function (point) { point[0] *= w; point[1] *= w; return point; } );

        const colours = [
            'rgb(51, 255, 214)',
            'rgb(51, 255, 227)',
            'rgb(51, 232, 255)',
            'rgb(51, 181, 255)',
            'rgb(255, 0, 0)'
        ];

        const SEEDS = colours.length;
        var seed = 0;

        var halfWidth = parseInt( this.width * 0.5, 10 );
        var halfHeight = parseInt( this.height * 0.5, 10 );

        for ( seed; seed < SEEDS; seed++ ) {

            this.ctx.fillStyle = colours[ seed ];

            let pX = halfWidth;
            let pY = halfHeight;

            for ( let i = 0; i < 20000; i++ ) {

                let r = Math.random() * 0.1 + 0.25;

                let iteration = this.iterate( pX, pY );

                while ( iteration[ 0 ] === pX || iteration[ 1 ] === pY ) {

                    console.log('extra iteration');
                    iteration = this.iterate( pX, pY );
                }

                pX = iteration[ 0 ];
                pY = iteration[ 1 ];

                // constrain to polygon
                let inside = pointInsidePolygon( iteration, dropAdj );
                if ( !inside ) { continue; }

                drawCircle( this.ctx, iteration[ 0 ], iteration[ 1 ], r );
                this.ctx.fill();
            }

        }

        if ( this.DEBUG ) {

            this.ctx.save();

            this.ctx.globalAlpha = 0.3;
            this.ctx.strokeStyle = 'red';
            this.ctx.lineWidth = 3;

            this.ctx.beginPath();
            this.ctx.moveTo( dropAdj[ 0 ][ 0 ], dropAdj[ 0 ][ 1 ] );

            for ( var i = 1; i < dropAdj.length; i++ ) {

                this.ctx.lineTo( dropAdj[ i ][ 0 ], dropAdj[ i ][ 1 ] );
            }

            this.ctx.closePath();
            this.ctx.stroke();

            this.ctx.restore();
        }
    },

    iterate: function (pX, pY) {

        let spread = 1;
        let boundingMarginX = 1;
        let boundingMarginY = 6;

        let dX = Math.random() > 0.5 ? 1 : -1;
        let dY = Math.random() > 0.5 ? 1 : -1;

        let x = parseInt( Math.min( Math.max( pX + dX * spread, boundingMarginX ), this.width - boundingMarginX ), 10 );
        let y = parseInt( Math.min( Math.max( pY + dY * spread, boundingMarginY ), this.height - boundingMarginY ), 10 );

        return [ x, y ];
    }

});